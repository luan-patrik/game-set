// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          Role           @default(USER)
  settings      Settings[]
  filesettings  FileSettings[]

  @@map("users")
}

model Settings {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  authorId     String         @db.ObjectId
  author       User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  filesettings FileSettings[]

  @@map("settings")
}

model FileSettings {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  authorId   String   @db.ObjectId
  fileUrl    String   @unique
  name       String
  size       Int
  private    Boolean  @default(false)
  settingsId String   @db.ObjectId
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  settings   Settings @relation(fields: [settingsId], references: [id], onDelete: Cascade)

  @@map("filesettings")
}

enum Role {
  ADMIN
  USER
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
